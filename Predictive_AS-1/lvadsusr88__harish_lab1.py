# -*- coding: utf-8 -*-
"""LVADSUSR88-	Harish-LAB1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BmiXaOTdJszWl2xllpcUSNO0PneRP1rx
"""

import pandas as pd
import warnings
warnings.filterwarnings("ignore")
df = pd.read_csv("/content/expenses.csv")
df

# Handle missing values and outliers
nullcount  = df.isnull().sum()
print(nullcount)

# Outliers

# Calculate the IQR
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

# Identify outliers using the IQR method
outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)
# Remove outliers
cleaned_df = df[~outliers]
print(cleaned_df)
cleaned_df.to_csv('cleaned_dataset.csv', index=False)

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

cleaned_df["sex"]=label_encoder.fit_transform(cleaned_df["sex"])
cleaned_df["smoker"] = label_encoder.fit_transform(cleaned_df[['smoker']])

cleaned_df["region"] = label_encoder.fit_transform(cleaned_df[['region']])
print(cleaned_df)

# duplicates = cleaned_df.duplicated(keep=False)
# duplicates
duplicates = cleaned_df.duplicated(keep=False)
cleaned_df['dup_bool'] = duplicates
cleaned_df[cleaned_df['dup_bool'] == True].count()
cleaned_df = cleaned_df[cleaned_df['dup_bool'] == False]
cleaned_df = cleaned_df.drop('dup_bool',axis=1)

import seaborn as sns

sns.pairplot(cleaned_df)

"""By the Above plots, It can be seen that Age, number of children and region has strong impact on the Insurance costs"""

from sklearn.model_selection import train_test_split

X = cleaned_df.drop('charges',axis=1)
y = cleaned_df['charges']
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3)

from sklearn.linear_model import LinearRegression
clf = LinearRegression()
model = clf.fit(x_train,y_train)
preds = clf.predict(x_test)
res_set = x_test
res_set['RESULT'] = preds
res_set.to_csv('/content/output.csv')

#Evaluation
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

mse = mean_squared_error(y_test,preds)
rmse = np.sqrt(mse)
r2 = r2_score(y_test,preds)

print('MSE: ',mse)
print('RMSE: ',rmse)
print('R-Squared: ',r2)